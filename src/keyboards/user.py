from aiogram.utils.keyboard import (InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton,
                                    ReplyKeyboardMarkup, InlineKeyboardBuilder)
from src.database import Game, games
from src.misc import (NavigationCallback, PaymentCheckCallback, TransactionType, BalanceTransactionCallback,
                      GamesCallback, PaymentMethod, ConfirmWithdrawRequisitesCallback)
from src.utils import cryptobot

invite_link = 'tg://msg_url?url=https://t.me/{bot_username}?start={user_tg_id}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–ø–æ%20–º–æ–µ–π%20—Å—Å—ã–ª–∫–µ'


def get_navigation_callback(branch: str, option: str = None) -> NavigationCallback:
    return NavigationCallback(branch=branch, option=option)


class PrivateKeyboards:
    # branch MAIN
    @staticmethod
    def get_main_menu() -> ReplyKeyboardMarkup:
        menu_kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üé∞  –ò–≥—Ä–∞—Ç—å  üé∞")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]],
            resize_keyboard=True)
        return menu_kb

    @staticmethod
    def get_cancel_payment() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            is_persistent=True
        )

    # branch PLAY
    @staticmethod
    def get_play_menu() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ò–≥—Ä–∞—Ç—å"""
        builder = InlineKeyboardBuilder()

        builder.button(text='‚ô† BlackJack', callback_data=get_navigation_callback('play', 'blackjack'))
        builder.button(text='üé≤ Games', callback_data=get_navigation_callback('play', 'games'))

        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    async def get_game_category(available_games: list[Game]) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–∏–ø –∏–≥—Ä—ã"""
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data='create')
        builder.add(InlineKeyboardButton(text='‚ôª –û–±–Ω–æ–≤–∏—Ç—å', callback_data='refresh_games'))

        for game in available_games[:8]:
            text = f'{game.type.value}#{game.number} | üí∏{game.bet} | {(await games.get_players_of_game(game))[0].name}'
            builder.button(text=text, callback_data=GamesCallback(game_number=game.number, action='show')).row()

        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=get_navigation_callback('play'))
        builder.adjust(2, 1)
        return builder.as_markup()

    # branch PROFILE
    @staticmethod
    def get_profile() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ü—Ä–æ—Ñ–∏–ª—å"""
        builder = InlineKeyboardBuilder()

        builder.button(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data=get_navigation_callback('profile', 'deposit'))
        builder.button(text='üí∞ –í—ã–≤–µ—Å—Ç–∏', callback_data=get_navigation_callback('profile', 'withdraw'))
        builder.button(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data=get_navigation_callback('profile', 'referral_system'))

        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def get_payment_methods(transaction_type: TransactionType) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()
        back_builder = InlineKeyboardBuilder().button(text='üîô –ù–∞–∑–∞–¥', callback_data=get_navigation_callback('profile'))

        builder.button(
            text='üí≥ –°–ë–ü',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.SBP
            )
        )
        builder.button(
            text='ü§ñ –ö—Ä–∏–ø—Ç–æ–ë–æ—Ç',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.CRYPTO_BOT
            )
        )
        builder.button(
            text='üíú –ÆMoney',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.U_MONEY
            )
        )

        builder.adjust(2)
        return builder.attach(back_builder).as_markup()

    @staticmethod
    def get_confirm_withdraw_requisites() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=ConfirmWithdrawRequisitesCallback(requisites_correct=True))
        builder.button(text='‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data=ConfirmWithdrawRequisitesCallback(requisites_correct=False))
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def get_cryptobot_choose_currency(transaction_type: TransactionType) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ö—Ä–∏–ø—Ç–æ –ë–æ—Ç–æ–º"""
        currency_builder = InlineKeyboardBuilder()

        currencies = await cryptobot.get_currencies()
        for code in currencies:
            currency_builder.button(
                text=code, callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type,
                method=PaymentMethod.CRYPTO_BOT, currency=code)
            )
        currency_builder.adjust(4)

        back_builder = InlineKeyboardBuilder()
        back_builder.button(text='üîô –û—Ç–º–µ–Ω–∞', callback_data=NavigationCallback(branch='profile', option='deposit'))
        back_builder.adjust(1)

        currency_builder.attach(back_builder)
        return currency_builder.as_markup()

    @staticmethod
    def get_invoice(method: PaymentMethod, pay_url: str, invoice_id: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –µ—ë –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_url)
        builder.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=PaymentCheckCallback(method=method, invoice_id=invoice_id))
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_referral_system(bot_username: str, user_telegram_id: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        builder = InlineKeyboardBuilder()

        url = invite_link.format(bot_username=bot_username, user_tg_id=user_telegram_id)
        builder.button(text='üì≤ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', url=url)
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=get_navigation_callback('profile'))
        builder.adjust(1)

        return builder.as_markup()

    # branch INFORMATION
    @staticmethod
    def get_information() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–æ –≤–∫–ª–∞–¥–∫—É –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        builder = InlineKeyboardBuilder()
        builder.button(
            text='üîù –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ üîù',
            callback_data=NavigationCallback(branch='info', option='top_players')
        )

        builder.add(
            InlineKeyboardButton(text='üí¨ –ß–∞—Ç', url='https://t.me/'),
            InlineKeyboardButton(text='üì∞ –ù–æ–≤–æ—Å—Ç–∏', url='https://t.me/'),
            InlineKeyboardButton(text='üìö –ü—Ä–∞–≤–∏–ª–∞', url='https://t.me/')
        )

        builder.adjust(1, 2, 1)
        return builder.as_markup()

    @staticmethod
    async def get_top_players() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â—É—é —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ö –ø–æ–±–µ–¥"""
        top_players = await games.get_top_players()
        builder = InlineKeyboardBuilder()
        for data in top_players:
            builder.button(
                text=f"üÜî{data.get('telegram_id')} | üë§{data.get('name')} | üèÜ {data.get('winnings_count')}",
                url=f"tg://user?id={data.get('telegram_id')}"
            )
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=get_navigation_callback('info'))
        builder.adjust(1)
        return builder.as_markup()


class PublicKeyboards:
    @staticmethod
    async def get_join_game(game: Game) -> InlineKeyboardMarkup | None:
        if len(await games.get_players_of_game(game)) == game.max_players:
            return None

        builder = InlineKeyboardBuilder()

        builder.button(
            text='‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data=GamesCallback(action='join', game_number=game.number)
        )

        builder.adjust(1)
        return builder.as_markup()
