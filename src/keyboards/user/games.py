from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums.dice_emoji import DiceEmoji

from src.database import Game, games
from src.misc import GamesCallback, NavigationCallback, GameType, GameCategory
from src.misc.callback_factories import BlackJackCallback


class BaccaratKeyboards:
    @staticmethod
    def get_bet_options() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text='üë§ –ò–≥—Ä–æ–∫')],
            [KeyboardButton(text='ü§ù –ù–∏—á—å—è')],
            [KeyboardButton(text='üè¶ –ë–∞–Ω–∫–∏—Ä')],
        ])


class BlackJackKeyboards:
    @staticmethod
    def get_controls(game_number: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='üëá –í–∑—è—Ç—å', callback_data=BlackJackCallback(game_number=game_number, move='take'))
        builder.button(text='‚úã –•–≤–∞—Ç–∏—Ç', callback_data=BlackJackCallback(game_number=game_number, move='stand'))
        return builder.as_markup()
        # "üôÖ‚Äç‚ôÇ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
class UserPrivateGameKeyboards:
    @staticmethod
    def get_dice_kb(dice_emoji: str) -> ReplyKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–º–æ–¥–∑–∏"""
        dice_button = KeyboardButton(text=dice_emoji)
        return ReplyKeyboardMarkup(keyboard=[[dice_button]])

    @staticmethod
    def get_play_menu() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ò–≥—Ä–∞—Ç—å"""
        builder = InlineKeyboardBuilder()

        builder.button(text='üé≤ Games', callback_data=GamesCallback(action='show', game_category=GameCategory.BASIC))
        builder.button(text='‚ô† BlackJack', callback_data=GamesCallback(action='show',
                                                                       game_category=GameCategory.BLACKJACK,
                                                                       game_type=GameType.BJ))
        builder.button(text='üé¥ Baccarat', callback_data=GamesCallback(action='show',
                                                                      game_category=GameCategory.BACCARAT,
                                                                      game_type=GameType.BACCARAT))
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def get_game_category(available_games: list[Game], category: GameCategory) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä"""
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data=GamesCallback(action='create', game_category=category))
        builder.button(text='‚ôª –û–±–Ω–æ–≤–∏—Ç—å', callback_data=GamesCallback(action='refresh', game_category=category))
        builder.adjust(2)
        builder.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=GamesCallback(action='stats', game_category=category))

        for game in available_games[:10]:
            text = f'{game.game_type.value}#{game.number} | üí∞{game.bet} | {(await games.get_creator_of_game(game)).name}'
            builder.button(
                text=text,
                callback_data=GamesCallback(action='show', game_category=category, game_number=game.number)
            ).row()

        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=NavigationCallback(branch='game_strategies'))
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def get_back_from_stats(category: GameCategory) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –æ–∫–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä"""
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=GamesCallback(action='show', game_category=category))
        return builder.as_markup()

    @staticmethod
    def get_basic_game_types() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–∞–∑–æ–≤–æ–π –∏–≥—Ä—ã –ø—Ä–∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–∏"""
        builder = InlineKeyboardBuilder()
        # ide –º–æ–∂–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è, –Ω–æ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ
        dice_emojis = [emoji.value for emoji in DiceEmoji]

        for game_type in GameType:
            if game_type.value in dice_emojis:
                builder.button(
                    text=f'{game_type.value} {game_type.get_full_name()}',
                    callback_data=GamesCallback(
                        action='create',
                        game_category=GameCategory.BASIC,
                        game_type=game_type
                    )
                )

        builder.adjust(2)
        back_builder = InlineKeyboardBuilder()
        back_builder.button(text='üîô –ù–∞–∑–∞–¥',
                            callback_data=GamesCallback(action='show', game_category=GameCategory.BASIC))
        builder.attach(back_builder)
        return builder.as_markup()

    @staticmethod
    def get_cancel_bet_entering(game_category: GameCategory) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='üîô –û—Ç–º–µ–Ω–∞', callback_data=GamesCallback(action='show', game_category=game_category))
        return builder.as_markup()

    @staticmethod
    async def get_join_game_or_back(game_category: GameCategory, game_number: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä—ã –∏–∑ –º–µ–Ω—é"""
        builder = InlineKeyboardBuilder()
        builder.button(text='‚ö° –ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É ‚ö°',
                       callback_data=GamesCallback(
                           action='join', game_category=game_category, game_number=game_number)
                       )
        builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=GamesCallback(action='show', game_category=game_category))
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def show_game(game: Game) -> InlineKeyboardMarkup | None:
        """–ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É (–∫–æ–≥–¥–∞ –ø–µ—Ä–µ—à—ë–ª –≤ –±–æ—Ç–∞)"""
        if len(await games.get_players_of_game(game)) == game.max_players:
            return None

        builder = InlineKeyboardBuilder()

        builder.button(
            text=f'{game.game_type.value} –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
            callback_data=GamesCallback(
                action='join', game_number=game.number,
                game_category=game.category, game_type=game.game_type
            )
        )

        return builder.as_markup()


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö
class UserPublicGameKeyboards:
    @staticmethod
    async def get_go_to_bot_and_join(game: Game, bot_username: str):
        """–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—É (–∫–Ω–æ–ø–∫–∞ –¥–ª—è —á–∞—Ç–∞)"""
        if len(await games.get_players_of_game(game)) == game.max_players:
            return None

        builder = InlineKeyboardBuilder()
        builder.button(
            text='üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –±–æ—Ç–µ',
            url=f"https://t.me/{bot_username}?start=_{game.game_type.name}_{game.number}"
        )
        return builder.as_markup()

    @staticmethod
    async def get_join_game_in_chat(game: Game) -> InlineKeyboardMarkup | None:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –∏–≥—Ä–æ–π –¥–ª—è —á–∞—Ç–∞"""
        if len(await games.get_players_of_game(game)) == game.max_players:
            return None

        builder = InlineKeyboardBuilder()
        builder.button(
            text='‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data=GamesCallback(action='join', game_number=game.number)
        )
        return builder.as_markup()
