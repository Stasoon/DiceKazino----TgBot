from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import (InlineKeyboardMarkup, InlineKeyboardBuilder)

from src.misc import (NavigationCallback, PaymentCheckCallback, TransactionType,
                      BalanceTransactionCallback, PaymentMethod, ConfirmWithdrawRequisitesCallback)
from src.utils import cryptobot


class UserPaymentKeyboards:
    @staticmethod
    def get_cancel_payment() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            is_persistent=True
        )

    @staticmethod
    def get_payment_methods(transaction_type: TransactionType) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()

        builder.button(
            text='üí≥ –°–ë–ü',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.SBP
            )
        )
        builder.button(
            text='ü§ñ –ö—Ä–∏–ø—Ç–æ–ë–æ—Ç',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.CRYPTO_BOT
            )
        )
        builder.button(
            text='üíú –ÆMoney',
            callback_data=BalanceTransactionCallback(
                transaction_type=transaction_type, method=PaymentMethod.U_MONEY
            )
        )

        builder.adjust(2)
        back_builder = InlineKeyboardBuilder()
        back_builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data=NavigationCallback(branch='profile'))
        return builder.attach(back_builder).as_markup()

    @staticmethod
    def get_confirm_withdraw_requisites() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=ConfirmWithdrawRequisitesCallback(requisites_correct=True))
        builder.button(text='‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
                       callback_data=ConfirmWithdrawRequisitesCallback(requisites_correct=False))
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    async def get_cryptobot_choose_currency(transaction_type: TransactionType) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ö—Ä–∏–ø—Ç–æ –ë–æ—Ç–æ–º"""
        currency_builder = InlineKeyboardBuilder()

        currencies = await cryptobot.get_currencies()
        for code in currencies:
            currency_builder.button(
                text=code, callback_data=BalanceTransactionCallback(
                    transaction_type=transaction_type,
                    method=PaymentMethod.CRYPTO_BOT, currency=code)
            )
        currency_builder.adjust(4)

        back_builder = InlineKeyboardBuilder()
        back_builder.button(text='üîô –û—Ç–º–µ–Ω–∞', callback_data=NavigationCallback(branch='profile', option='deposit'))
        back_builder.adjust(1)

        currency_builder.attach(back_builder)
        return currency_builder.as_markup()

    @staticmethod
    def get_invoice(method: PaymentMethod, pay_url: str, invoice_id: int) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –µ—ë –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=pay_url)
        builder.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data=PaymentCheckCallback(method=method, invoice_id=invoice_id))
        builder.adjust(1)
        return builder.as_markup()
