from aiogram import html

from src.database import User, Game, PlayerMove, users
from src.database import games
from settings import Config


class Messages:
    # region Utils
    @classmethod
    async def __get_game_header(cls, game: Game):
        return f"{game.type.value} ‚Ññ{game.number}"

    @classmethod
    async def __get_players_results(cls, game_moves: list[PlayerMove]) -> str:
        strings = []

        for move in game_moves:
            strings.append(f"{str(await move.player.get())} - [{move.value}]")

        return '\n'.join(strings)

    @staticmethod
    async def get_game_participants(game: Game):
        player_strings = []
        number_emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£']
        players = await games.get_players_of_game(game)
        players = [*players, *(None,) * (game.max_players-len(players))]

        for emoji, player in zip(number_emojis, players):
            text = str(player) if player else '–û–∂–∏–¥–∞–Ω–∏–µ...'
            player_strings.append(f"{emoji} - {text}")

        return '\n'.join(player_strings)

    # endregion

    # region Private

    @staticmethod
    async def get_welcome(user_name: str = '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü') -> str:
        return f'''üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(user_name)}! '''

    @staticmethod
    async def get_play_menu(user: User) -> str:
        return f'''üë§ –í—ã –≤ –∏–≥—Ä–æ–≤–æ–º –º–µ–Ω—é \n
ü™ô –ë–∞–ª–∞–Ω—Å: {html.code(user.balance)}'''

    @staticmethod
    async def get_referral_system(bot_username, user_telegram_id: int, referrals_count: int) -> str:
        return f'''
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ \n
üë§ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: !!! ‚ÇΩ \n
‚Äî –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –í–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 0.5%
‚Äî –í—ã–≤–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç 300 ‚ÇΩ \n
üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:
http://t.me/{bot_username}?start={user_telegram_id}'''

    @staticmethod
    async def get_information(total_users_count: int, total_games_count: int) -> str:
        return f'''
üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: \n
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users_count} \n
‚ôª –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {total_games_count} \n
üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:
‚î£ @stascsa
‚îó @stascsa'''

    @staticmethod
    async def get_user_profile(user: User) -> str:
        return f'''
üåÄ ID: {html.code(user.telegram_id)}
üë§ –ù–∏–∫: {html.code(user.name)}
ü™ô –ë–∞–ª–∞–Ω—Å: {html.code(user.balance)}
üïë –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {html.code(user.registration_date.strftime("%d/%m/%Y"))} \n
‚ûï –ü–æ–ø–æ–ª–Ω–∏–ª: !!!
‚ûñ –í—ã–≤–µ–ª: !!!'''

    # endregion

    @classmethod
    async def get_game_in_chat(cls, game: Game, game_title: str = '–ò–≥—Ä–∞') -> str:
        header = await cls.__get_game_header(game)
        players_text = f"üë• –ò–≥—Ä–æ–∫–∏: \n{await Messages.get_game_participants(game)}"
        bet_text = f"üí∞ –°—Ç–∞–≤–∫–∞: {game.bet} ‚ÇΩ"

        result = f"{header} \n\n{players_text} \n\n{bet_text} \n\n"

        if await games.is_game_full(game):
            result += f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ  {html.code(f'{game.type.value}')}  –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        else:
            result += f"üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {len(await games.get_player_ids(game))}/{game.max_players} —á–µ–ª."

        return result

    @classmethod
    async def get_game_in_chat_finish(cls, game: Game, winner_id: int | None, game_moves: list[PlayerMove], win_amount: float):
        header = f'{await cls.__get_game_header(game)}'
        results = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: \n{await cls.__get_players_results(game_moves)}'

        winner_text = 'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {} \nüí∞ –í—ã–∏–≥—Ä—ã—à: {} ‚ÇΩ'
        draw = f'‚ö°‚ö°‚ö° –ù–∏—á—å—è ‚ö°‚ö°‚ö° \n‚ôª –í–æ–∑–≤—Ä–∞—â–∞—é —Å—Ç–∞–≤–∫–∏'

        return f"{header} \n\n{results} \n\n" \
               f"{winner_text.format(await users.get_user_obj(telegram_id=winner_id), win_amount) if winner_id else draw}"

    # region MiniGames

    @classmethod
    async def get_mini_game_loose(cls, game: Game) -> str:
        creator = await games.get_creator_of_game(game)
        return f'''üë§ {str(creator)}
üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {game.bet} ‚ÇΩ
üçÄ –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç'''

    @classmethod
    async def get_mini_game_victory(cls, game: Game, win_amount: float):
        creator = await games.get_creator_of_game(game)
        return f'''üë§ {str(creator)}
üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!
‚ûï –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {html.code(f'{win_amount} ‚ÇΩ')}'''

    class Exceptions:
        @staticmethod
        async def get_low_balance() -> str:
            return '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!'

        @staticmethod
        async def get_already_in_game() -> str:
            return '‚ùó–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ'

        @staticmethod
        async def get_invalid_argument_count(must_be_count: int) -> str:
            return f'–í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {must_be_count} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤'

        @staticmethod
        async def get_another_game_not_finished(user_active_game: Game) -> str:
            return f'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É {user_active_game.type.value} ‚Ññ{user_active_game.number}'

        @staticmethod
        async def get_arguments_have_invalid_types() -> str:
            return '–ê—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞!'

    # endregion
