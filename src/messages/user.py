from aiogram import html

from src.database import (transactions, games, User, Game, PlayerMove, get_referrals_count_of_user,
                          get_total_games_count, get_total_users_count, get_user_or_none)
from src.misc import PaymentMethod


def format_float(value: float) -> str:
    return f"{value:.2f}"


def format_balance(balance: float, use_html: bool = True) -> str:
    balance_text = f"{ format_float(balance) } ‚ÇΩ"
    return html.code(balance_text) if use_html else balance_text


class UserMessages:
    # region Utils
    @classmethod
    def get_game_header(cls, game: Game):
        return f"–ò–≥—Ä–∞ {game.type.value} ‚Ññ{game.number}"

    @classmethod
    async def get_players_results(cls, game_moves: list[PlayerMove]) -> str:
        strings = []

        for move in game_moves:
            strings.append(f"{str(await move.player.get())} - [{move.value}]")

        return '\n'.join(strings)

    @staticmethod
    async def get_game_participants(game: Game):
        player_strings = []
        number_emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£']
        players = await games.get_players_of_game(game)
        players = [*players, *(None,) * (game.max_players-len(players))]

        for emoji, player in zip(number_emojis, players):
            text = str(player) if player else '–û–∂–∏–¥–∞–Ω–∏–µ...'
            player_strings.append(f"{emoji} - {text}")

        return '\n'.join(player_strings)

    # endregion

    # region Private

    @staticmethod
    def get_welcome(user_name: str = '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü') -> str:
        return f'''üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(user_name)}! '''

    @staticmethod
    def get_play_menu(user: User) -> str:
        return f'''üë§ –í—ã –≤ –∏–≥—Ä–æ–≤–æ–º –º–µ–Ω—é \n
ü™ô –ë–∞–ª–∞–Ω—Å: {html.code(user.balance)}'''

    @staticmethod
    async def get_referral_system(bot_username, user_id: int) -> str:
        return f'''
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ \n
üë§ –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {await get_referrals_count_of_user(user_id)}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {format_balance(await transactions.get_referral_earnings(user_id))} \n
‚Äî –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –í–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 0.5%
‚Äî –í—ã–≤–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç 300 ‚ÇΩ \n
üîó –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:
http://t.me/{bot_username}?start={user_id}'''

    @staticmethod
    async def get_information() -> str:
        return f'''
üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: \n
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {await get_total_users_count()} \n
‚ôª –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {await get_total_games_count()} \n
üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è:
‚î£ @stascsa
‚îó @stascsa'''

    @staticmethod
    def get_top_players() -> str:
        return 'üéñ 10-–∫–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ \n\nID | –ò–º—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥'

    @staticmethod
    async def get_profile(user: User) -> str:
        return f'''
üåÄ ID: {html.code(user.telegram_id)}
üë§ –ù–∏–∫: {html.code(user.name)}
ü™ô –ë–∞–ª–∞–Ω—Å:  {format_balance(user.balance)}
üïë –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {html.code(user.registration_date.strftime("%d/%m/%Y"))} \n
‚ûï –ü–æ–ø–æ–ª–Ω–∏–ª:  {format_balance(await transactions.get_user_all_deposits_sum(user))}
‚ûñ –í—ã–≤–µ–ª:  {format_balance(await transactions.get_user_all_withdraws_sum(user))} '''

    @staticmethod
    def get_choose_deposit_method() -> str:
        return html.bold('üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:')

    @staticmethod
    def get_choose_withdraw_method() -> str:
        return html.bold('üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞:')

    @staticmethod
    def get_confirm_withdraw_requisites() -> str:
        return 'üíé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥?'

    @staticmethod
    def choose_currency() -> str:
        return html.bold('üíé –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:')

    @staticmethod
    def enter_deposit_amount(min_deposit_amount) -> str:
        return html.bold(f"üíé –í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏: \n") + \
               f"(–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç - {format_balance(min_deposit_amount)})"

    @staticmethod
    def enter_withdraw_amount(min_withdraw_amount) -> str:
        return html.bold("üíé –í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å –±–∞–ª–∞–Ω—Å–∞: \n") + \
               f"(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - {format_balance(min_withdraw_amount)})"

    @staticmethod
    def enter_user_withdraw_requisites(withdraw_method: PaymentMethod) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏,
        –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞"""
        necessary_requisites = None

        if withdraw_method == PaymentMethod.SBP:
            necessary_requisites = f"üí≥ –í–≤–µ–¥–∏—Ç–µ {html.bold('–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞')} –∏ {html.bold('–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã')}:"
        elif withdraw_method == PaymentMethod.U_MONEY:
            necessary_requisites = f"üí≥ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à {html.bold('–Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney')}:"
        return necessary_requisites

    @staticmethod
    def get_half_auto_deposit_method_requisites(deposit_method: PaymentMethod):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞"""
        requisites = ''

        if deposit_method == PaymentMethod.SBP:
            requisites = "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ –°–ë–ü –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: \n" \
                   f"üí≥ –ü–æ –Ω–æ–º–µ—Ä—É: \n{html.code('+7 (978) 212-83-15')}"
        elif deposit_method == PaymentMethod.U_MONEY:
            requisites = "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ÆMoney –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: \n" \
                   f"üí≥ –ü–æ –Ω–æ–º–µ—Ä—É —Å—á—ë—Ç–∞: \n{html.code('5599002035793779')}"

        requisites += '\n\nüì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞:'
        return requisites

    @staticmethod
    def get_deposit_link_message() -> str:
        return "üîó –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:"

    @staticmethod
    def get_deposit_confirmed() -> str:
        return '‚úÖ –ì–æ—Ç–æ–≤–æ! –°—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.'

    @staticmethod
    def get_wait_for_administration_confirm() -> str:
        return '‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ \n\n‚è∞ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è...'

    # endregion

    @classmethod
    async def get_game_in_chat(cls, game: Game) -> str:
        header = cls.get_game_header(game)
        players_text = f"üë• –ò–≥—Ä–æ–∫–∏: \n{await UserMessages.get_game_participants(game)}"
        bet_text = f"üí∞ –°—Ç–∞–≤–∫–∞: {game.bet} ‚ÇΩ"

        result = f"{header} \n\n{players_text} \n\n{bet_text} \n\n"

        if await games.is_game_full(game):
            result += f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ  {html.code(f'{game.type.value}')}  –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
        else:
            result += f"üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {len(await games.get_player_ids_of_game(game))}/{game.max_players} —á–µ–ª."

        return result

    @classmethod
    async def get_game_in_chat_finish(cls, game: Game, winner_id: int | None, game_moves: list[PlayerMove],
                                      win_amount: float):
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã
        header = cls.get_game_header(game)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
        results = await cls.get_players_results(game_moves)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏ –≤—ã–∏–≥—Ä—ã—à–µ
        if winner_id:
            winner_text = f'üí∞ –í—ã–∏–≥—Ä—ã—à: {format_balance(win_amount)}\n' \
                          f'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {await get_user_or_none(telegram_id=winner_id)}'
        else:
            winner_text = '‚ö°‚ö°‚ö° –ù–∏—á—å—è ‚ö°‚ö°‚ö° \n‚ôª –í–æ–∑–≤—Ä–∞—â–∞—é —Å—Ç–∞–≤–∫–∏'

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return f"{header}\n\n{results}\n\n{winner_text}"

    # region MiniGames

    @classmethod
    async def get_mini_game_loose(cls, game: Game) -> str:
        creator = await games.get_creator_of_game(game)
        return f'''üë§ {str(creator)}
üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_balance(game.bet)}
üçÄ –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç'''

    @classmethod
    async def get_mini_game_victory(cls, game: Game, win_amount: float):
        creator = await games.get_creator_of_game(game)
        return f'''üë§ {str(creator)}
üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!
‚ûï –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {format_balance(win_amount)}'''


class ExceptionMessages:
    @staticmethod
    def get_too_many_requests() -> str:
        return 'üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ'

    @staticmethod
    def get_not_registered_in_bot() -> str:
        return f'‚ùó–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ —á–∞—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞'

    @staticmethod
    def get_payment_error() -> str:
        return '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚ùó \n–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'

    @staticmethod
    def get_payment_not_found() -> str:
        return '‚ùó–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'

    @staticmethod
    def get_message_text_too_long() -> str:
        return '‚ùó–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'

    @staticmethod
    def get_message_text_too_short() -> str:
        return '‚ùó–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'

    @staticmethod
    def get_insufficient_transaction_amount(min_transaction_amount: float) -> str:
        """–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π"""
        return f'‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - {format_balance(min_transaction_amount)}. \n' \
               f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:'

    @staticmethod
    def get_insufficient_balance(balance: float):
        """–ù–∞ –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ–≥–æ <—Å—É–º–º–∞>. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É"""
        return f'‚ùó–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ–≥–æ {format_balance(balance)}. \n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:'

    @staticmethod
    def get_photo_expected() -> str:
        return '‚ùó–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:'

    @staticmethod
    def get_text_expected() -> str:
        return '‚ùó–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'

    @staticmethod
    def get_invalid_number_message():
        return '‚ùó–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:'

    @staticmethod
    def get_low_balance() -> str:
        return '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!'

    @staticmethod
    def get_already_in_game() -> str:
        return '‚ùó–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ'

    @staticmethod
    def get_already_in_other_game(game: Game) -> str:
        return f'‚ùó–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ {game.type.value}‚Ññ{game.number}'

    @staticmethod
    def get_bet_too_low(min_bet: int) -> str:
        return f'‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ - {format_balance(min_bet, use_html=False)}'

    @staticmethod
    def get_invalid_argument_count(must_be_count: int) -> str:
        return f'‚ùó–í –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {must_be_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.'

    @staticmethod
    def get_another_game_not_finished(user_active_game: Game) -> str:
        return f'‚ùó–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∑–∞–≤–µ—Ä—à–∏—Ç–µ {UserMessages.get_game_header(game=user_active_game)}'

    @staticmethod
    def get_arguments_have_invalid_types() -> str:
        return '‚ùó–ê—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞!'

    @staticmethod
    def low_balance_for_withdraw(min_withdraw_amount: float):
        return f'‚õî–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - {format_balance(min_withdraw_amount, use_html=False)}'
